author 'Hercinger Viktor';
email 'hercinger.viktor@gmail.com';
version 2;
language alp;

ignore SPACES '\\s+';
ignore COMMENTS '\\#.*?\\n';

# Tokenizer tokens
literal TOKEN 'token';
literal KEYWORD 'keyword';
literal LITERAL 'literal';
literal IGNORE 'ignore';

# Node tokens
literal NODE 'node';
literal LIST 'list';
literal SELECTION 'selection';

# Property tokens
literal OPTIONAL 'optional';
literal REQUIRED 'required';

# Rule definition
literal RULE 'rule';
literal START 'start';

# Precedence
literal PRECEDENCE 'precedence';
literal LEFT 'left';
literal RIGHT 'right';

# Other
literal INCLUDE 'include';

# Header entries
literal LANGUAGE 'language';
literal AUTHOR 'author';
literal VERSION 'version';
literal EMAIL 'email';

# Symbols
literal SEMICOLON ';';
literal COLON ',';
literal MINUS '-';
literal EQ '=';
literal PERIOD '.';
literal COMMA ':';

literal LCURLY '{';
literal RCURLY '}';

literal LPAREN '(';
literal RPAREN ')';

literal PRECSYM '%prec';
literal ERRSYM '%error';
literal WARNSYM '%warning';

# Tokens
token ID '[a-zA-Z_][a-zA-Z0-9_]*';
token STRING '\'([^\'\\\\]+|\\\\.)*\'';
token INTEGER '[+-]?(0|[1-9][0-9]*)';

start AlpScript;

# Root of the ALP script
node AlpScript
{
  required head;
  required body;

  rule AlpHead AlpBody;
};

# Header of the ALP script
list AlpHead
{
  rule;
  rule head=AlpHeaderEntry -SEMICOLON body=AlpHead;
};

node AlpHeaderEntry
{
  required key;
  required value;

  rule LANGUAGE ID;
  rule AUTHOR STRING;
  rule EMAIL STRING;
  rule VERSION INTEGER;
};

# Script body
list AlpBody
{
  rule;
  rule head=SelMainEntry -SEMICOLON body=AlpBody;
};

# Main entry types
selection SelMainEntry
{
  rule AlpStart;
  rule AlpInclude;
  rule SelToken;
  rule SelParser;
};

node AlpStart
{
  required symbol;

  rule -START ID;
};

node AlpInclude
{
  required path;

  rule -INCLUDE STRING;
};

# Tokenizer constructs
selection SelToken
{
  rule AlpToken;
  rule AlpLiteral;
  rule AlpKeyword;
  rule AlpIgnore;
};

node AlpToken
{
  required name;
  required value;
  required metainfo;

  rule -TOKEN ID STRING AlpTokenMetainfoList;
};

node AlpLiteral
{
  required name;
  required value;
  required metainfo;

  rule -LITERAL ID STRING AlpTokenMetainfoList;
};

node AlpKeyword
{
  required value;

  rule -KEYWORD ID;
};

node AlpIgnore
{
  required name;
  required value;

  rule -IGNORE ID STRING;
};

# Parser constructs
selection SelParser
{
  rule AlpPrecedence;
  rule AlpNode;
  rule AlpList;
  rule AlpSelection;
};

node AlpPrecedence
{
  required direction;
  required tokens;

  rule -PRECEDENCE LEFT -LPAREN AlpIdList -RPAREN;
  rule -PRECEDENCE RIGHT -LPAREN AlpIdList -RPAREN;
};

node AlpNode
{
  required name;
  required body;

  rule -NODE ID -LCURLY AlpNodeBody -RCURLY;
};

node AlpList
{
  required name;
  required body;
  
  rule -LIST ID -LCURLY AlpRuleList -RCURLY;
};

node AlpSelection
{
  required name;
  required body;

  rule -SELECTION ID -LCURLY AlpRuleList -RCURLY;
};

node AlpNodeBody
{
  required properties;
  required rules;

  rule AlpPropertyList AlpRuleList;
};

# Property definitions
list AlpPropertyList
{
  rule;
  rule head=AlpProperty -SEMICOLON body=AlpPropertyList;
};

node AlpProperty
{
  required klass;
  required name;

  rule REQUIRED ID;
  rule OPTIONAL ID;
};

# Rule definitions
list AlpRuleList
{
  rule head=AlpRule -SEMICOLON;
  rule head=AlpRule -SEMICOLON body=AlpRuleList;
};

node AlpRule
{
  required entries;
  required metainfo;

  rule -RULE AlpRuleEntryList AlpRuleMetainfoList;
};

list AlpRuleEntryList
{
  rule;
  rule head=AlpRuleEntry body=AlpRuleEntryList;
};

node AlpRuleEntry
{
  optional ignored;
  optional key;
  required name;

  rule name=ID;
  rule key=ID -EQ name=ID;
  rule ignored=MINUS name=ID;
};

# Generic constructs
list AlpModuleName
{
  rule head=ID;
  rule head=ID -PERIOD body=AlpModuleName;
};

list AlpIdList
{
  rule head=ID;
  rule head=ID -COLON body=AlpIdList;
};

# Rule/token metainfo
list AlpRuleMetainfoList
{
  rule;
  rule head=AlpRuleMetainfo body=AlpRuleMetainfoList;
};

list AlpTokenMetainfoList
{
  rule;
  rule head=AlpTokenMetainfo body=AlpTokenMetainfoList;
};

selection AlpRuleMetainfo
{
  rule AlpPrecedenceMetainfo;
  rule AlpErrorMetainfo;
  rule AlpWarningMetainfo;
};

selection AlpTokenMetainfo
{
  rule AlpErrorMetainfo;
  rule AlpWarningMetainfo;
};

node AlpPrecedenceMetainfo
{
  required prec;

  rule -PRECSYM ID;
};

node AlpErrorMetainfo
{
  required message_format;

  rule -ERRSYM STRING;
};

node AlpWarningMetainfo
{
  required message_format;

  rule -WARNSYM STRING;
};
