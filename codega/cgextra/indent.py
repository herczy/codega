'''Indentation helper functions

Dependencies: None
'''

def indent(text, level = 1, indent_empty_lines = False, indent_string = '  ', strip_result = True):
    '''General purpose indentation

    Arguments:
    text -- Text to indent. The text is split to lines and each line
            is individualy indented.
    indent_empty_lines -- If set, empty lines will be indented too.
    indent_string -- Before each line this string is copied level times.
    strip_result -- If set, each line is right-stripped in the result
    '''

    def __indent_line(line):
        if not indent_empty_lines and not line.strip():
            return ''

        res = '%s%s' % (indent_string * level, line)
        if strip_result:
            res = res.rstrip()

        return res

    return '\n'.join(map(__indent_line, text.split('\n')))

def c_multi_comment(text):
    '''C multi-line comment.

    The comment will look like this:
    /*
     * COMMENT TEXT
     */

    Arguments:
    text -- Text to indent
    '''

    box = indent(text, indent_empty_lines = True, indent_string = ' * ')
    return '/*\n%s\n */' % box

def hash_comment(text):
    '''Python/Shell/etc. style multiline comment

    The commented text will look something like this:
    #
    # COMMENT TEXT
    #
    '''

    return indent(text, indent_empty_lines = True, indent_string = '# ')

def disclaimer(context, comment = hash_comment):
    '''Create a commented disclaimer.

    The disclaimer will look something like this:
    #
    # THIS FILE IS AUTOMATICALLY GENERATED, ...
    #
    '''

    targetfile = context.target.filename
    srcfile = context.source.resource
    genref = str(context.target.generator)

    text = '''THIS IS AN AUTOMATICALLY GENERATED FILE. ALL MANUAL MODIFICATIONS TO IT WILL
MAY BE LOST AT ANY TIME! MODIFY THE TEMPLATE INSTEAD (see below)

Source file         %(srcfile)s
Target file         %(targetfile)s
Generator class     %(genref)s''' % locals()

    return comment(text)
